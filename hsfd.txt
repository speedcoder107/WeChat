import os

import sqlite3
from flask import Flask, flash, redirect, render_template, request, session
# from flask_session import Session
# from tempfile import mkdtemp
# from werkzeug.security import check_password_hash, generate_password_hash

# from helpers import apology, login_required


# Configure application
app = Flask(__name__)

# Configure session to use filesystem (instead of signed cookies)
# app.config["SESSION_PERMANENT"] = False
# app.config["SESSION_TYPE"] = "filesystem"
# Session(app)

# Configure CS50 Library to use SQLite database
# con = sqlite3.connect("wechat.db")
# db = con.cursor()


# @app.after_request
# def after_request(response):
#     """Ensure responses aren't cached"""
#     response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
#     response.headers["Expires"] = 0
#     response.headers["Pragma"] = "no-cache"
#     return response

@app.route("/")
def index():
    return render_template("index.html")

# @app.route("/login", methods=["GET", "POST"])
# def login():
#     """Log user in"""

#     # Forget any user_id
#     session.clear()

#     # User reached route via POST (as by submitting a form via POST)
#     if request.method == "POST":
#         # Redirect user to home page
#         return redirect("/")

#     # User reached route via GET (as by clicking a link or via redirect)
#     else:
#         return render_template("login.html")

if __name__ == "__main__":
    app.run(debug=True)







# @app.route("/")
# @login_required
# def index():
#     """Show portfolio of stocks"""
#     user_id = session["user_id"]
#     update(db, user_id)
#     stocks = db.execute("SELECT * FROM portfolio WHERE id = ?", user_id)
#     try:
#         cash = db.execute("SELECT cash FROM users WHERE id = ?", user_id)[
#             0]["cash"]
#         total = 0
#         for stock in stocks:
#             total += stock["total"]
#         total += cash
#     except:
#         return render_template("index.html", stocks=stocks, cash=10000, total=10000)
#     return render_template("index.html", stocks=stocks, cash=cash, total=total)


# @app.route("/buy", methods=["GET", "POST"])
# @login_required
# def buy():
#     """Buy shares of stock"""

#     # when form is submitted
#     if request.method == "POST":
#         symbol = request.form.get("symbol").upper()
#         shares = request.form.get("shares")
#         user_id = session["user_id"]

#         # check if symbol and shares were provided
#         if not symbol:
#             return apology("missing Symbol", 400)
#         if not shares:
#             return apology("missing Shares", 400)

#         # check if symbol is valid
#         company = lookup(symbol)
#         if not company:
#             return apology("Invalid Symbol", 400)

#         # check if shares are valid
#         try:
#             shares = int(shares)
#         except:
#             return apology("Invalid shares", 400)

#         # check if you have enough cash to buy shares
#         price = float(company["price"])
#         total = price*shares
#         cash = db.execute("SELECT cash FROM users WHERE id = ?", user_id)[
#             0]["cash"]
#         if cash < total:
#             return apology("can't afford", 400)

#         # update portfolio table
#         portfolio_id = str(user_id) + " " + str(symbol)
#         name = company["name"]
#         try:
#             db.execute("INSERT INTO portfolio (portfolio_id, id, symbol, name, shares, price, total) VALUES (?,?,?,?,?,?,?)",
#                        portfolio_id, user_id, symbol, name, shares, price, total)
#         except ValueError:
#             old_shares = db.execute(
#                 "SELECT shares FROM portfolio WHERE portfolio_id = ?", portfolio_id)[0]["shares"]
#             old_total = db.execute(
#                 "SELECT total FROM portfolio WHERE portfolio_id = ?", portfolio_id)[0]["total"]
#             new_shares = old_shares + shares
#             new_total = old_total + total
#             db.execute("UPDATE portfolio SET shares = ?, total = ? WHERE portfolio_id = ?",
#                        new_shares, new_total, portfolio_id)

#         # update history table
#         db.execute("INSERT INTO history (id, symbol, shares, price) VALUES (?,?,?,?)",
#                    user_id, symbol, shares, price)

#         # update cash in user table
#         cash = cash - total
#         db.execute("UPDATE users SET cash = ? WHERE id = ?", cash, user_id)

#         flash("Bought")
#         return redirect("/")

#     # when you go to the form by clicking a link
#     else:
#         return render_template("buy.html")


# @app.route("/history")
# @login_required
# def history():
#     """Show history of transactions"""
#     user_id = session["user_id"]
#     transactions = db.execute("SELECT * FROM history WHERE id = ?", user_id)
#     return render_template("history.html", transactions=transactions)


# @app.route("/login", methods=["GET", "POST"])
# def login():
#     """Log user in"""

#     # Forget any user_id
#     session.clear()

#     # User reached route via POST (as by submitting a form via POST)
#     if request.method == "POST":

#         # Ensure username was submitted
#         if not request.form.get("username"):
#             return apology("must provide username", 403)

#         # Ensure password was submitted
#         elif not request.form.get("password"):
#             return apology("must provide password", 403)

#         # Query database for username
#         rows = db.execute("SELECT * FROM users WHERE username = ?",
#                           request.form.get("username"))

#         # Ensure username exists and password is correct
#         if len(rows) != 1 or not check_password_hash(rows[0]["hash"], request.form.get("password")):
#             return apology("invalid username and/or password", 403)

#         # Remember which user has logged in
#         session["user_id"] = rows[0]["id"]

#         # Redirect user to home page
#         return redirect("/")

#     # User reached route via GET (as by clicking a link or via redirect)
#     else:
#         return render_template("login.html")


# @app.route("/logout")
# def logout():
#     """Log user out"""

#     # Forget any user_id
#     session.clear()

#     # Redirect user to login form
#     return redirect("/")


# @app.route("/quote", methods=["GET", "POST"])
# @login_required
# def quote():
#     """Get stock quote."""

#     #
#     if request.method == "POST":
#         if not request.form.get("symbol"):
#             return apology("Missing Symbol", 400)
#         companies = lookup(request.form.get("symbol"))
#         if not companies:
#             return apology("Invalid Symbol", 400)
#         return render_template("quoted.html", companies=companies)
#     else:
#         return render_template("quote.html")


# @app.route("/register", methods=["GET", "POST"])
# def register():
#     """Register user"""

#     # Forget any user_id
#     session.clear()

#     # User reached route via POST (as by submitting a form via POST)
#     if request.method == "POST":

#         # Ensure username was submitted
#         if not request.form.get("username"):
#             return apology("must provide username", 400)

#         # Ensure password was submitted
#         elif not request.form.get("password"):
#             return apology("must provide password", 400)

#         elif not request.form.get("password") == request.form.get("confirmation"):
#             return apology("passwords don't match", 400)

#         username = request.form.get("username")
#         password = request.form.get("password")
#         hash = generate_password_hash(password)

#         # Query database for username
#         try:
#             db.execute(
#                 "INSERT INTO users (username, hash) VALUES(?,?)", username, hash)

#         except ValueError:
#             return apology("choose a different username", 400)
#         # Remember which user has logged in
#         rows = db.execute("SELECT * FROM users WHERE username = ?",
#                           request.form.get("username"))

#         session["user_id"] = rows[0]["id"]

#         # Redirect user to home page
#         return redirect("/")
#     else:
#         usernames = db.execute("SELECT username from users")
#         return render_template("register.html", usernames=usernames)


# @app.route("/sell", methods=["GET", "POST"])
# @login_required
# def sell():
#     """Sell shares of stock"""

#     #  when form is submitted
#     if request.method == "POST":
#         symbol = request.form.get("symbol")
#         shares = request.form.get("shares")
#         user_id = session["user_id"]

#         # check if symbol and shares are provided
#         if not symbol:
#             return apology("missing Symbol", 400)

#         if not shares:
#             return apology("missing Shares", 400)

#         # check if symbol provided is valid
#         symbols_dict = db.execute(
#             "SELECT symbol FROM portfolio WHERE id = ?", user_id)
#         symbols = []
#         for i in symbols_dict:
#             symbols.append(i["symbol"])
#         if symbol not in symbols:
#             return apology("Invalid Symbol", 400)

#         # check if shares provided are valid
#         try:
#             shares = int(shares)
#         except ValueError:
#             return apology("Invalid shares", 400)

#         # check if shares provided are more than shares owned
#         old_shares = db.execute(
#             "SELECT shares FROM portfolio WHERE id = ? AND symbol = ?", user_id, symbol)[0]["shares"]
#         if old_shares < shares:
#             return apology("too many shares", 400)

#         # update portfolio table
#         portfolio_id = str(user_id) + " " + str(symbol)
#         new_shares = old_shares - shares
#         company = lookup(symbol)
#         price = float(company["price"])
#         if new_shares == 0:
#             db.execute(
#                 "DELETE FROM portfolio WHERE portfolio_id = ?", portfolio_id)
#         elif new_shares > 0:
#             new_total = new_shares*price
#             db.execute("UPDATE portfolio SET shares = ?, total = ? WHERE portfolio_id = ?",
#                        new_shares, new_total, portfolio_id)

#         # update cash in users table
#         cash = db.execute("SELECT cash FROM users WHERE id = ?", user_id)[
#             0]["cash"]
#         cash += shares*price
#         db.execute("UPDATE users SET cash = ? WHERE id = ?", cash, user_id)

#         # update history table
#         db.execute("INSERT INTO history (id, symbol, shares, price) VALUES (?,?,?,?)",
#                    user_id, symbol, -1*shares, price)

#         # redirect to homepage
#         flash("Sold")
#         return redirect("/")

#     # when you go to the form by clicking a link
#     else:
#         user_id = session["user_id"]
#         symbols = db.execute(
#             "SELECT symbol FROM portfolio WHERE id = ?", user_id)
#         return render_template("sell.html", symbols=symbols)
